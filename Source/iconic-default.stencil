// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen YOLO

import UIKit

{% if icons %}

/**
 Wrapper functions for Objective-C compatibility.
 */
public extension Iconic {

    @objc class var {{enumName|lowerFirstWord}}Count: Int{
        return {{enumName}}.count
    }
    
    @objc class func register{{enumName}}() {
        {{enumName}}.register()
    }
    
    @objc class func attributedString(with{{enumName}} icon: {{enumName}}, pointSize: CGFloat, color: UIColor?) -> NSAttributedString {
        return icon.attributedString(ofSize: pointSize, color: color)
    }
    
    @objc class func image(with{{enumName}} icon: {{enumName}}, pointSize: CGSize, color: UIColor?) -> UIImage {
        return icon.image(ofSize: pointSize, color: color)
    }
}

public extension UIBarButtonItem {
    
    convenience init(with{{enumName}} icon: {{enumName}}, size: CGSize, target: AnyObject?, action: Selector) {
        
        let image = icon.image(ofSize: size, color: UIColor.black)
        self.init(image: image, style: .plain, target: target, action: action)
    }
}

public extension UITabBarItem {
    
    convenience init(with{{enumName}} icon: {{enumName}}, size: CGSize, title: String?) {
        
        let image = icon.image(ofSize: size, color: UIColor.black)
        self.init(title: title, image: image, tag: icon.rawValue)
    }
}

public extension UIButton {
    
    func setIconImage(with{{enumName}} icon: {{enumName}}, size: CGSize, color:UIColor?, forState state: UIControlState) {
        
        let image = icon.image(ofSize: size, color: color ?? UIColor.black)
        setImage(image, for: state)
    }
}

/**
A list with available glyphs detected from the icon font.
*/
@objc public enum {{enumName}}: Int {
    {% for icon in icons %}
    case {{icon.name|swiftIdentifier|snakeToCamelCase}}
    {% endfor %}

    // Useful to get the total count of icons. This index doesn't have any associated unicode value.
    public static var count: Int { return {{ icons.count }} }
}

extension {{enumName}} : IconDrawable {
    
    public static var familyName:String {
        return "{{familyName}}"
    }
    
    public init(named iconName: String) {
        switch iconName.lowercased() {
        {% for icon in icons %}
        case "{{icon.name|swiftIdentifier|lowercase}}": self = .{{icon.name|swiftIdentifier|snakeToCamelCase}}
        {% endfor %}
        default: self = {{enumName}}(rawValue: 0)!
        }
    }
    
    public var unicode:String {
        switch self {
        {% for icon in icons %}
        case .{{icon.name|swiftIdentifier|snakeToCamelCase}}: return "{{icon.unicode|unicodeCase}}"
        {% endfor %}
        }
    }
    
    public var name: String {
        switch self {
        {% for icon in icons %}
        case .{{icon.name|swiftIdentifier|snakeToCamelCase}}: return "{{icon.name|swiftIdentifier|snakeToCamelCase}}"
        {% endfor %}
        }
    }
}

{% else %}
// No icon found
{% endif %}
