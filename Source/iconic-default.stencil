// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import UIKit

{% if icons %}
public extension Iconic {

    /**
    Registers the icon font to Iconic.
    You shall do this once, when launching your application. Internally, the icon mapping is retrieved and
    kept in memory during the application's life term.
    */
    class func registerIconFont() {
        Iconic.registerFont(withName: "{{familyName}}", map: IconMap)
    }

    /**
    Creates an attributed string with the specified icon enum type, with optional color.

    - parameter icon: The icon enum type.
    - parameter size: The size of the text, in points.
    - parameter color: Optional color to be applied to the icon.
    */
    class func attributedString(forIcon icon: Icon, size: CGFloat, color: UIColor?) -> NSAttributedString? {
        return Iconic.attributedString(forIndex: icon.rawValue, size: size, color: color)
    }

    /**
    Creates an attributed string with the specified icon enum type, with optional color and alignment.
    The optional alinment can be really helpful when appending an icon to another attributed string with different fonts.
    It may also help for adjusting the icon's baseline, when using either top and bottom insets.

    - parameter icon: The icon enum type.
    - parameter size: The size of the text, in points.
    - parameter color: Optional color to be applied to the icon.
    - parameter edgeInsets: Optional edge insets to be used as horizontal and vertical margins.
    */
    class func attributedString(forIcon icon: Icon, size: CGFloat, color: UIColor?, edgeInsets: UIEdgeInsets) -> NSAttributedString? {
        return Iconic.attributedString(forIndex: icon.rawValue, size: size, color: color, edgeInsets: edgeInsets)
    }

    /**
    Creates an image out of an attributed string with the specified icon enum type.

    - parameter icon: The icon enum type.
    - parameter size: The size of the text, in points.
    - parameter color: Optional color to be applied to the icon.
    */
    class func image(forIcon icon: Icon, size: CGFloat, color: UIColor?) -> UIImage? {
        return Iconic.image(forIndex: icon.rawValue, size: size, color: color)
    }

    /**
     Returns a string representation of an unicode for the specified icon enum type.

     - parameter icon: The icon enum type.
     - returns An unicode string representation.
     */
    class func unicodeString(forIcon icon: Icon) -> String? {
        return Iconic.unicodeString(forIndex: icon.rawValue)
    }
}

public extension UIBarButtonItem {

    /**
    Initializes a new item using the specified icon enum type and other properties.

    - parameter icon: The icon enum type to be used as image.
    - parameter size: The size of the image, in points.
    - parameter target: The object that receives the action message.
    - parameter action: The action to send to target when this item is selected.
    */
    convenience init(icon: Icon, size: CGFloat, target: AnyObject?, action: Selector) {
        let image = Iconic.image(forIndex: icon.rawValue, size: size, color: .blackColor())
        self.init(image: image, style: .Plain, target: target, action: action)
    }
}

public extension UITabBarItem {

    /**
    Initializes a new item using the specified icon enum type and other properties.

    - parameter icon: The icon enum type to be used as image.
    - parameter size: The size of the image, in points.
    - parameter title: The item's title. If nil, a title is not displayed.
    - parameter tag: The receiver's tag, an integer that you can use to identify bar item objects in your application.
    */
    convenience init(icon: Icon, size: CGFloat, title: String?, tag: Int) {
        let image = Iconic.image(forIndex: icon.rawValue, size: size, color: .blackColor())
        self.init(title: title, image: image, tag: tag)
    }
}

public extension UIButton {

    /**
    Sets the icon to use for the specified state.

    - parameter icon: The icon enum type to be used as image.
    - parameter size: The size of the image, in points.
    - parameter state: The state that uses the specified title. The values are described in UIControlState.
    */
    func setIcon(icon: Icon, size: CGFloat, forState: UIControlState) {
        self.setIcon(forIndex: icon.rawValue, size: size, forState: state)
    }
}

/**
A list with available glyphs detected from the icon font.
*/
@objc public enum Icon: Int {
    {% for icon in icons %}
    case {{icon.name|swiftIdentifier|snakeToCamelCase}}
    {% endfor %}

    // Useful to get the total count of icons. This index doesn't have any associated unicode value.
    case TotalCount
}

/**
A list of unicode characters associated with each Icon case, in order.
*/
public let IconMap: Array<String> = [
    {% for icon in icons %}
    "{{icon.unicode|unicodeCase}}",
    {% endfor %}
]

/**
Returns the name of an icon enum type as a string.
*/
public func NSStringFromIcon(icon: Icon) -> String {
    switch icon {
    {% for icon in icons %}
    case .{{icon.name|swiftIdentifier|snakeToCamelCase}}: return "{{icon.name|swiftIdentifier|snakeToCamelCase}}"
    {% endfor %}
    default: return ""
    }
}
{% else %}
// No icon found
{% endif %}